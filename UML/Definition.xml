<Shapes xmlns="http://www.evolus.vn/Namespace/Pencil"  
        xmlns:p="http://www.evolus.vn/Namespace/Pencil"  
        xmlns:svg="http://www.w3.org/2000/svg"  
        xmlns:xlink="http://www.w3.org/1999/xlink"  
      
        id="uml"  
            displayName="UML"  
            description="UML stencyl"  
            author="Marcelo D. RÃ©"  
            url="Optional URL to its web page">  
              
            <!-- Your shapes go here -->  
              
    <Properties>
        <PropertyGroup name="Background">
            <Property displayName="Background" name="fillColor" type="Color">#BDDFFFFF</Property>
        </PropertyGroup>
        <PropertyGroup name="Border">
            <Property displayName="Border Color" name="strokeColor" type="Color">#666666ff</Property>
            <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">2|</Property>
        </PropertyGroup>
        <PropertyGroup name="Text">
            <Property displayName="Default font" name="defaultTextFont" type="Font">Helvetica|normal|normal|12px</Property>
            <Property displayName="defaultextcolor" name="defaultTextColor" type="Color">#000000ff</Property>
        </PropertyGroup>
    </Properties>
    <Script>
        <![CDATA[
            collection.VIA_LENGTH = 15;
            collection.buildSnappingGuides = function (shape) {
                var box = shape.getProperty("box");
                return [
                    new SnappingData("Top", 0, "Top", false, shape.id).makeLocal(true),
                    new SnappingData("HCenter", box.h / 2, "HCenter", false, shape.id).makeLocal(true),
                    new SnappingData("Bottom", box.h, "Bottom", false, shape.id).makeLocal(true),
                    new SnappingData("Left", 0, "Left", true, shape.id).makeLocal(true),
                    new SnappingData("VCenter", box.w / 2, "VCenter", true, shape.id).makeLocal(true),
                    new SnappingData("Right", box.w, "Right", true, shape.id).makeLocal(true)
                    ]
            };
            collection.buildConnectorOutletsWith = function (box, overridingOutlets) {
                var definedOutlets = [];
                var outlets = [];
                if (overridingOutlets) {
                    for (var i in overridingOutlets) {
                        var outlet = overridingOutlets[i];
                        definedOutlets.push(outlet.id);
                        if (outlet.classes) outlets.push(outlet);
                    }
                }
                var systemOutlets = [
                    new Outlet("top-left", "FCInput", 0, 0),
                    new Outlet("top-center", "FCInput", box.w / 2, 0),
                    new Outlet("top-right", "FCInput", box.w, 0),
                    new Outlet("middle-left", "FCInput", 0, box.h / 2),
                    new Outlet("middle-center", "FCInput", box.w / 2, box.h / 2),
                    new Outlet("middle-right", "FCInput", box.w, box.h / 2),
                    new Outlet("bottom-left", "FCInput", 0, box.h),
                    new Outlet("bottom-center", "FCInput", box.w / 2, box.h),
                    new Outlet("bottom-right", "FCInput", box.w, box.h)
                ];
                for (var i in systemOutlets) {
                    var outlet = systemOutlets[i];
                    stencilDebug("checking: " + outlet.id);
                    if (definedOutlets.indexOf(outlet.id) >= 0) continue;
                    stencilDebug("\tadding: " + outlet.id);
                    outlets.push(outlet);
                }
                return outlets;
            };
        ]]>
    </Script>

    <!--<Shortcut displayName="Straight Connector" icon="Icons/straight-connector.png" to="Evolus.Common:arrow">
        <PropertyValue name="textFont"><E>$$defaultTextFont</E></PropertyValue>
        <PropertyValue name="textColor"><E>$$defaultTextColor</E></PropertyValue>
        <PropertyValue name="strokeColor"><E>$$strokeColor</E></PropertyValue>
        <PropertyValue name="strokeStyle"><E>$$strokeStyle</E></PropertyValue>
        <PropertyValue name="mode">straight</PropertyValue>
        <PropertyValue name="withStartArrow">false</PropertyValue>
        <PropertyValue name="withEndArrow">true</PropertyValue>
    </Shortcut>-->
    <Shortcut displayName="Association" icon="Icons/multi-segment-connector.png" to="Evolus.Common:arrow">
        <PropertyValue name="textFont"><E>$$defaultTextFont</E></PropertyValue>
        <PropertyValue name="textColor"><E>$$defaultTextColor</E></PropertyValue>
        <PropertyValue name="strokeColor"><E>$$strokeColor</E></PropertyValue>
        <PropertyValue name="strokeStyle"><E>$$strokeStyle</E></PropertyValue>
        <PropertyValue name="mode">multi-straight</PropertyValue>
        <PropertyValue name="withStartArrow">false</PropertyValue>
        <PropertyValue name="withEndArrow">true</PropertyValue>
    </Shortcut>
    <!--<Shortcut displayName="Association curvy" icon="Icons/curvy-connector.png" to="Evolus.Common:arrow">
        <PropertyValue name="textFont"><E>$$defaultTextFont</E></PropertyValue>
        <PropertyValue name="textColor"><E>$$defaultTextColor</E></PropertyValue>
        <PropertyValue name="strokeColor"><E>$$strokeColor</E></PropertyValue>
        <PropertyValue name="strokeStyle"><E>$$strokeStyle</E></PropertyValue>
        <PropertyValue name="mode">curvy</PropertyValue>
        <PropertyValue name="withStartArrow">false</PropertyValue>
        <PropertyValue name="withEndArrow">true</PropertyValue>
    </Shortcut>
    -->
    <Shape displayName="Class" icon="Icons/process.png" id="class">
        <Properties>
            <PropertyGroup>
                <Property displayName="Box" name="box" type="Dimension">100,80</Property>

                <Property displayName="Outpin #1 origin" name="outputPin1Origin" p:expressionX="$box.w / 2" p:expressionY="0" type="Point">50,0</Property>
                <Property displayName="Outpin #1" name="outputPin1" p:connectTo="FCInput" p:unconnectedValue="$outputPin1Origin" type="Handle">0,0</Property>                
                <Property displayName="Outpin #2 origin" name="outputPin2Origin" p:expressionX="$box.w" p:expressionY="$box.h / 2" type="Point">100,50</Property>
                <Property displayName="Outpin #2" name="outputPin2" p:connectTo="FCInput" p:unconnectedValue="$outputPin2Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #3 origin" name="outputPin3Origin" p:expressionX="$box.w / 2" p:expressionY="$box.h" type="Point">50,100</Property>
                <Property displayName="Outpin #3" name="outputPin3" p:connectTo="FCInput" p:unconnectedValue="$outputPin3Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #4 origin" name="outputPin4Origin" p:expressionX="0" p:expressionY="$box.h / 2" type="Point">0,50</Property>
                <Property displayName="Outpin #4" name="outputPin4" p:connectTo="FCInput" p:unconnectedValue="$outputPin4Origin" type="Handle">0,0</Property>
            </PropertyGroup>
            <PropertyGroup name="Background">
                <Property displayName="Background" name="fillColor" type="Color">
                    <E>$$fillColor</E>
                </Property>
            </PropertyGroup>
            <PropertyGroup name="Border">
                <Property displayName="Border Color" name="strokeColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
                <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">
                    <E>$$strokeStyle</E>
                </Property>
            </PropertyGroup>
            <PropertyGroup name="Text">
                <Property displayName="Text Content" name="textContent" p:editInfo="({targetName: 'text', bound: Bound.fromBox($box), font: $textFont, align: $textAlign, multi: true})" type="PlainText" />
                <Property displayName="Text Font" name="textFont" type="Font">
                    <E>$$defaultTextFont</E>
                </Property>
                <Property displayName="Text Color" name="textColor" type="Color">
                    <E>$$defaultTextColor</E>
                </Property>
                <Property displayName="Text Align" name="textAlign" type="Alignment">1,1</Property>
            </PropertyGroup>
            <PropertyGroup name="Option Texts">
                <Property displayName="Option Text 1" name="optionText1" type="PlainText"
                    p:editInfo="
                    var targetBox = F.getObjectBoundingBox('text1');
                    var sizeBox = F.textSize('text1');
                    var newBox = new Bound(targetBox.x, targetBox.y + ((sizeBox.h / 2) - 10), Math.sqrt((sizeBox.w * sizeBox.w) + (sizeBox.h * sizeBox.h)) + 10 , 20);
                    ({targetName: 'text1', bound: newBox
                    , font: $optionTextFont, color: $optionTextColor, align: new Alignment(1, 1)})"><![CDATA[]]></Property>
                <Property displayName="Option Text 2" name="optionText2" type="PlainText"
                    p:editInfo="
                    var targetBox = F.getObjectBoundingBox('text2');
                    var sizeBox = F.textSize('text2');
                    var newBox = new Bound(targetBox.x, targetBox.y + ((sizeBox.h / 2) - 10), Math.sqrt((sizeBox.w * sizeBox.w) + (sizeBox.h * sizeBox.h)) + 10 , 20);
                    ({targetName: 'text2', bound: newBox
                    , font: $optionTextFont, color: $optionTextColor, align: new Alignment(1, 1)})" ><![CDATA[]]></Property>
                <Property displayName="Option Text 3" name="optionText3" type="PlainText"
                    p:editInfo="
                    var targetBox = F.getObjectBoundingBox('text3');
                    var sizeBox = F.textSize('text3');
                    var newBox = new Bound(targetBox.x, targetBox.y + ((sizeBox.h / 2) - 10), Math.sqrt((sizeBox.w * sizeBox.w) + (sizeBox.h * sizeBox.h)) + 10 , 20);
                    ({targetName: 'text3', bound: newBox
                    , font: $optionTextFont, color: $optionTextColor, align: new Alignment(1, 1)})"><![CDATA[]]></Property>
                <Property displayName="Option Text 4" name="optionText4" type="PlainText"
                    p:editInfo="
                    var targetBox = F.getObjectBoundingBox('text4');
                    var sizeBox = F.textSize('text4');
                    var newBox = new Bound(targetBox.x, targetBox.y + ((sizeBox.h / 2) - 10), Math.sqrt((sizeBox.w * sizeBox.w) + (sizeBox.h * sizeBox.h)) + 10 , 20);
                    ({targetName: 'text4', bound: newBox
                    , font: $optionTextFont, color: $optionTextColor, align: new Alignment(1, 1)})"><![CDATA[]]></Property>
                <Property displayName="Text Font" name="optionTextFont" type="Font">
                    <E>$$defaultTextFont</E>
                </Property>
                <Property displayName="Text Font" name="optionTextColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
            </PropertyGroup>
        </Properties>
        <Behaviors>
            <For ref="path">
                <Transform>[translate(($strokeStyle.w % 2) / 2, ($strokeStyle.w % 2) / 2)]</Transform>
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <Fill>$fillColor</Fill>
                <Bound>Bound.fromBox($box)</Bound>
            </For>
            <!-- -->
            <For ref="text1">
                <Font>$optionTextFont</Font>
                <Fill>$optionTextColor</Fill>
                <Visibility>$outputPin1.isConnected()</Visibility>
            </For>
            <For ref="textSpan1">
                <InnerText>$optionText1</InnerText>
                <Attr>
                    <Arg>"dy"</Arg>
                    <Arg>0 - $optionTextFont.getPixelHeight() / 3</Arg>
                </Attr>
                <Attr>
                    <Arg>"dx"</Arg>
                    <Arg> 0 </Arg>
                </Attr>
            </For>

            <For ref="text2">
                <Font>$optionTextFont</Font>
                <Fill>$optionTextColor</Fill>
                <Visibility>$outputPin2.isConnected()</Visibility>
            </For>
            <For ref="textSpan2">
                <InnerText>$optionText2</InnerText>
                <Attr>
                    <Arg>"dy"</Arg>
                    <Arg>0 - $optionTextFont.getPixelHeight() / 3</Arg>
                </Attr>
                <Attr>
                    <Arg>"dx"</Arg>
                    <Arg> 0 </Arg>
                </Attr>
            </For>

            <For ref="text3">
                <Font>$optionTextFont</Font>
                <Fill>$optionTextColor</Fill>
                <Visibility>$outputPin3.isConnected()</Visibility>
            </For>
            <For ref="textSpan3">
                <InnerText>$optionText3</InnerText>
                <Attr>
                    <Arg>"dy"</Arg>
                    <Arg>0 - $optionTextFont.getPixelHeight() / 3</Arg>
                </Attr>
                <Attr>
                    <Arg>"dx"</Arg>
                    <Arg> 0 </Arg>
                </Attr>
            </For>

            <For ref="text4">
                <Font>$optionTextFont</Font>
                <Fill>$optionTextColor</Fill>
                <Visibility>$outputPin4.isConnected()</Visibility>
            </For>
            <For ref="textSpan4">
                <InnerText>$optionText4</InnerText>
                <Attr>
                    <Arg>"dy"</Arg>
                    <Arg>0 - $optionTextFont.getPixelHeight() / 3</Arg>
                </Attr>
                <Attr>
                    <Arg>"dx"</Arg>
                    <Arg> 0 </Arg>
                </Attr>
            </For>
            <For ref="text">
                <Font>$textFont</Font>
                <Color>$textColor</Color>
                <DomContent>F.buildTextWrapDomContent(F._target, $textContent.value, $box.w - $textFont.getPixelHeight(), $textAlign)</DomContent>
                <BoxFit>
                    <Arg>Bound.fromBox($box, $textFont.getPixelHeight() / 2)</Arg>
                    <Arg>new Alignment(1,1)</Arg>
                </BoxFit>
            </For>

            <For ref="outputArrrow1">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin1Origin, $outputPin1Origin.translate(0, 0 - collection.VIA_LENGTH)], $outputPin1, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow2">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin2Origin, $outputPin2Origin.translate(0 + collection.VIA_LENGTH, 0)], $outputPin2, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow3">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin3Origin, $outputPin3Origin.translate(0, 0 + collection.VIA_LENGTH)], $outputPin3, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow4">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin4Origin, $outputPin4Origin.translate(0 - collection.VIA_LENGTH, 0)], $outputPin4, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
        </Behaviors>
        <Actions>
            <Action id="getSnappingGuide">
                <Impl>return this.def.collection.buildSnappingGuides(this);</Impl>
            </Action>
            
            <Action id="getConnectorOutlets">
                <Impl>
                    <![CDATA[
                        var box = this.getProperty("box");
                        return [
                            new Outlet("top-left", "Bounding", 0, 0),
                            new Outlet("top-25", "Bounding", box.w / 4, 0),
                            new Outlet("top-center", "Bounding", box.w / 2, 0),
                            new Outlet("top-75", "Bounding", box.w / 4 * 3, 0),
                            new Outlet("top-right", "Bounding", box.w, 0),
                            new Outlet("middle-left-25", "Bounding", 0, box.h / 4),
                            new Outlet("middle-left", "Bounding", 0, box.h / 2),
                            new Outlet("middle-left-75", "Bounding", 0, box.h / 4 * 3),
                            new Outlet("middle-center", "Bounding", box.w / 2, box.h / 2),
                            new Outlet("middle-right-25", "Bounding", box.w, box.h / 4),
                            new Outlet("middle-right", "Bounding", box.w, box.h / 2),
                            new Outlet("middle-right-75", "Bounding", box.w, box.h / 4 * 3),
                            new Outlet("bottom-left", "Bounding", 0, box.h),
                            new Outlet("bottom-25", "Bounding", box.w / 4, box.h),
                            new Outlet("bottom-center", "Bounding", box.w / 2, box.h),
                            new Outlet("bottom-75", "Bounding", box.w / 4 * 3, box.h),
                            new Outlet("bottom-right", "Bounding", box.w, box.h)
                        ]
                    ]]>
                </Impl>
            </Action>
        </Actions>
        <p:Content xmlns="http://www.w3.org/2000/svg">
            <rect id="path" style="stroke-linejoin: round;" />

            <text id="text1">
                <textPath xlink:href="#outputArrrow1" startOffset="50%" text-anchor="middle" alignment-baseline="middle">
                    <tspan id="textSpan1" dy="-5"></tspan>
                </textPath>
            </text>
            <text id="text2">
                <textPath xlink:href="#outputArrrow2" startOffset="50%" text-anchor="middle" alignment-baseline="middle">
                    <tspan id="textSpan2" dy="-5"></tspan>
                </textPath>
            </text>
            <text id="text3">
                <textPath xlink:href="#outputArrrow3" startOffset="50%" text-anchor="middle" alignment-baseline="middle">
                    <tspan id="textSpan3" dy="-5"></tspan>
                </textPath>
            </text>
            <text id="text4">
                <textPath xlink:href="#outputArrrow4" startOffset="50%" text-anchor="middle" alignment-baseline="middle-left">
                    <tspan id="textSpan4" dy="-5"></tspan>
                </textPath>
            </text>

            <text id="text" text-anchor="start" xml:space="preserve" />
            <path id="outputArrrow1" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow2" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow3" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow4" style="stroke-linejoin: round; fill: none;" />
        </p:Content>
    </Shape>
    
    
    <Shape id="aggregation" displayName="Aggregation" icon="Icons/aggregation.png">  
        <Properties>  
            <PropertyGroup>  
                <Property displayName="Start" name="startPin" p:connectTo="*" type="Handle">0,0</Property>
                <Property name="outDir" displayName="Point" type="Handle">25,0</Property>  
                <Property name="a" displayName="Point" type="Handle">75,0</Property>  
                <Property displayName="End" name="endPin" p:connectTo="*" type="Handle">100,50</Property> 
            </PropertyGroup>  
            <PropertyGroup name="Border">
                <Property displayName="Border Color" name="strokeColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
                <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">
                    <E>$$strokeStyle</E>
                </Property>
            </PropertyGroup>
            
            <PropertyGroup name="Text">
                <Property displayName="Content" name="textContent"
                    p:editInfo="var targetBox = F.getObjectBoundingBox('text');
                    var sizeBox = F.textSize('text');
                    var newBox = new Bound(targetBox.x, targetBox.y + ((sizeBox.h / 2) - 10), Math.sqrt((sizeBox.w * sizeBox.w) + (sizeBox.h * sizeBox.h)) + 10 , 20);
                    ({targetName: 'text', bound: newBox
                     , font: $textFont, align: $textAlign, multi: false})" type="PlainText" />
                <Property displayName="Font" name="textFont" type="Font">
                    <E>$$defaultTextFont</E>
                </Property>
                <Property displayName="Color" name="textColor" type="Color">
                    <E>$$defaultTextColor</E>
                </Property>
                <Property displayName="Align" name="textAlign" type="Alignment">1,1</Property>
            </PropertyGroup>
            
        </Properties>  
        <Behaviors>  
            <For ref="path">  
                <StrokeColor>$strokeColor</StrokeColor>  
                <StrokeStyle>$strokeStyle</StrokeStyle>  
                <D><![CDATA[
                    xFact = 1;
                    yFact = 1;
                    xInc1 = 0;
                    xInc2 = 0;
                    yInc1 = 0;
                    yInc2 = 0;
                    
                    dx = $outDir.x - $startPin.x;
                    dy = $outDir.y - $startPin.y;
                    
                    rem = "Fix the 'a' point if it is near to the x o y position of the begining and end"
                    if ($a.x > $outDir.x -5 && $a.x < $outDir.x+5) {
                        $a.x = $outDir.x
                        }
                        
                    if ($a.x > $endPin.x -5 && $a.x < $endPin.x+5) {
                        $a.x = $endPin.x
                        }
                    if ($a.y > $outDir.y -5 && $a.y < $outDir.y+5) {
                        $a.y = $outDir.y
                        }
                        
                    if ($a.y > $endPin.y -5 && $a.y < $endPin.y+5) {
                        $a.y = $endPin.y
                        }
                    
                    rem = "detect the start direcction"    
                    if (Math.abs(dx) > Math.abs(dy)) {
                        xFact = Math.abs(dx)/dx;
                        
                        $outDir.x = $startPin.x + (25*xFact);
                        $outDir.y = $startPin.y;
                        
                        
                        result = [M($startPin.x, $startPin.y), 
                                    L($startPin.x + 10*xFact , $startPin.y - 5), 
                                    L($startPin.x + 20*xFact, $startPin.y), 
                                    M($startPin.x, $startPin.y), 
                                    L($startPin.x + 10*xFact, $startPin.y + 5), 
                                    L($startPin.x + 20*xFact, $startPin.y), 
                                    L($outDir.x,$outDir.y), 
                                    L($a.x, $a.y), L($endPin.x, $endPin.y)];
                        
                        
                    } else {
                        yFact = Math.abs(dy)/dy;
                        
                        $outDir.x = $startPin.x;
                        $outDir.y = $startPin.y + (25 * yFact);
                        
                        result = [M($startPin.x, $startPin.y), 
                                    L($startPin.x - 5, $startPin.y + 10*yFact ), 
                                    L($startPin.x , $startPin.y + 20*yFact), 
                                    M($startPin.x, $startPin.y), 
                                    L($startPin.x + 5, $startPin.y + 10*yFact), 
                                    L($startPin.x, $startPin.y + 20*yFact), 
                                    L($outDir.x,$outDir.y), 
                                    L($a.x, $a.y), L($endPin.x, $endPin.y)];
                    }
                    
                    
                    result
                    ]]>
                    </D>  
            </For>
            
            <For ref="text">
                <Color>$textColor</Color>
                <Font>$textFont</Font>
            </For>
            
            <For ref="textSpan">
                <InnerText>$textContent</InnerText>
                <Attr>
                    <Arg>"dy"</Arg>
                    <Arg>0 - $textFont.getPixelHeight() / 3</Arg>
                </Attr>
                <Attr>
                    <Arg>"dx"</Arg>
                    <Arg>
                        var arrowLength = Math.max($strokeStyle.w * 4, 6) * 2;
                        var dx = 0;
                        
                        dx;
                    </Arg>
                </Attr>
            </For>
        </Behaviors>  
        <p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil"  
                    xmlns="http://www.w3.org/2000/svg">  
            <defs>
                <path id="path" style="stroke-linejoin: round; fill: none;" />
            </defs>
            <use xlink:href="#path" stroke-width="10" stroke-opacity="0" stroke="#FF0000" />
            
            <text id="text">
                <textPath xlink:href="#path" startOffset="50" text-anchor="left" alignment-baseline="middle">
                    <tspan id="textSpan" dy="-5">Text along a curved path</tspan>
                </textPath>
            </text>

        </p:Content>  
    </Shape>
    
    <Shape id="composition" displayName="Composition" icon="Icons/composition.png">  
        <Properties>  
            <PropertyGroup>  
                <Property displayName="Start" name="startPin" p:connectTo="*" type="Handle">0,0</Property>
                <Property name="outDir" displayName="Point" type="Handle">25,0</Property>  
                <Property name="a" displayName="Point" type="Handle">75,0</Property>  
                <Property displayName="End" name="endPin" p:connectTo="*" type="Handle">100,50</Property> 
            </PropertyGroup>  
            <PropertyGroup name="Border">
                <Property displayName="Border Color" name="strokeColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
                <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">
                    <E>$$strokeStyle</E>
                </Property>
            </PropertyGroup>
            
            <PropertyGroup name="Text">
                <Property displayName="Content" name="textContent"
                    p:editInfo="var targetBox = F.getObjectBoundingBox('text');
                    var sizeBox = F.textSize('text');
                    var newBox = new Bound(targetBox.x, targetBox.y + ((sizeBox.h / 2) - 10), Math.sqrt((sizeBox.w * sizeBox.w) + (sizeBox.h * sizeBox.h)) + 10 , 20);
                    ({targetName: 'text', bound: newBox
                     , font: $textFont, align: $textAlign, multi: false})" type="PlainText" />
                <Property displayName="Font" name="textFont" type="Font">
                    <E>$$defaultTextFont</E>
                </Property>
                <Property displayName="Color" name="textColor" type="Color">
                    <E>$$defaultTextColor</E>
                </Property>
                <Property displayName="Align" name="textAlign" type="Alignment">1,1</Property>
            </PropertyGroup>
            
        </Properties>  
        <Behaviors>  
            <For ref="path">  
                <StrokeColor>$strokeColor</StrokeColor>  
                <StrokeStyle>$strokeStyle</StrokeStyle>  
                <D><![CDATA[
                    xFact = 1;
                    yFact = 1;
                    xInc1 = 0;
                    xInc2 = 0;
                    yInc1 = 0;
                    yInc2 = 0;
                    
                    rem = "Fix the 'a' point if it is near to the x o y position of the begining and end"
                    if ($a.x > $outDir.x -5 && $a.x < $outDir.x+5) {
                        $a.x = $outDir.x
                        }
                        
                    if ($a.x > $endPin.x -5 && $a.x < $endPin.x+5) {
                        $a.x = $endPin.x
                        }
                    if ($a.y > $outDir.y -5 && $a.y < $outDir.y+5) {
                        $a.y = $outDir.y
                        }
                        
                    if ($a.y > $endPin.y -5 && $a.y < $endPin.y+5) {
                        $a.y = $endPin.y
                        }
                    
                    rem = "detect the start direcction"    
                    
                    dx = $outDir.x - $startPin.x;
                    dy = $outDir.y - $startPin.y;
                    
                    if (Math.abs(dx) > Math.abs(dy)) {
                        xFact = Math.abs(dx)/dx;
                        
                        $outDir.x = $startPin.x + (25*xFact);
                        $outDir.y = $startPin.y;
                        
                        
                        result = [M($startPin.x, $startPin.y), 
                                    L($startPin.x + 10*xFact , $startPin.y - 5), 
                                    L($startPin.x + 20*xFact, $startPin.y),  
                                    L($startPin.x + 10*xFact, $startPin.y + 5), 
                                    L($startPin.x, $startPin.y), 
                                    L($outDir.x,$outDir.y), 
                                    L($a.x, $a.y), L($endPin.x, $endPin.y)];
                        
                        
                    } else {
                        yFact = Math.abs(dy)/dy;
                        
                        $outDir.x = $startPin.x;
                        $outDir.y = $startPin.y + (25 * yFact);
                        
                        result = [M($startPin.x, $startPin.y), 
                                    L($startPin.x - 5, $startPin.y + 10*yFact ), 
                                    L($startPin.x, $startPin.y + 20*yFact), 
                                    L($startPin.x + 5, $startPin.y + 10*yFact), 
                                    L($startPin.x, $startPin.y), 
                                    L($outDir.x,$outDir.y), 
                                    L($a.x, $a.y), L($endPin.x, $endPin.y)];
                    }
                    
                    
                    result
                    ]]>
                    </D>  
            </For>
            
            <For ref="text">
                <Color>$textColor</Color>
                <Font>$textFont</Font>
            </For>
            
            <For ref="textSpan">
                <InnerText>$textContent</InnerText>
                <Attr>
                    <Arg>"dy"</Arg>
                    <Arg>0 - $textFont.getPixelHeight() / 3</Arg>
                </Attr>
                <Attr>
                    <Arg>"dx"</Arg>
                    <Arg>
                        var arrowLength = Math.max($strokeStyle.w * 4, 6) * 2;
                        var dx = 0;
                        
                        dx;
                    </Arg>
                </Attr>
            </For>
        </Behaviors>  
        <p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil"  
                    xmlns="http://www.w3.org/2000/svg">  
            <defs>
                <path id="path" style="stroke-linejoin: round; fill: none;" />
            </defs>
            <use xlink:href="#path" stroke-width="10" stroke-opacity="0" stroke="#FF0000" />
            
            <text id="text">
                <textPath xlink:href="#path" startOffset="70" text-anchor="left" alignment-baseline="middle">
                    <tspan id="textSpan" dy="-5">Text along a curved path</tspan>
                </textPath>
            </text>

        </p:Content>  
    </Shape>
    
    
    <Shape id="generalization" displayName="Generalization" icon="Icons/generalization.png">  
        <Properties>  
            <PropertyGroup>  
                <Property displayName="Start" name="startPin" p:connectTo="*" type="Handle">0,0</Property>
                <Property name="outDir" displayName="Point" type="Handle">15,0</Property>  
                <Property name="a" displayName="Point" type="Handle">75,0</Property>  
                <Property displayName="End" name="endPin" p:connectTo="*" type="Handle">100,50</Property> 
            </PropertyGroup>
            <PropertyGroup name="Border">
                <Property displayName="Border Color" name="strokeColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
                <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">
                    <E>$$strokeStyle</E>
                </Property>
            </PropertyGroup>
            
            
            <PropertyGroup name="Text">
                <Property displayName="Content" name="textContent"
                    p:editInfo="var targetBox = F.getObjectBoundingBox('text');
                    var sizeBox = F.textSize('text');
                    var newBox = new Bound(targetBox.x, targetBox.y + ((sizeBox.h / 2) - 10), Math.sqrt((sizeBox.w * sizeBox.w) + (sizeBox.h * sizeBox.h)) + 10 , 20);
                    ({targetName: 'text', bound: newBox
                     , font: $textFont, align: $textAlign, multi: false})" type="PlainText" />
                <Property displayName="Font" name="textFont" type="Font">
                    <E>$$defaultTextFont</E>
                </Property>
                <Property displayName="Color" name="textColor" type="Color">
                    <E>$$defaultTextColor</E>
                </Property>
                <Property displayName="Align" name="textAlign" type="Alignment">1,1</Property>
            </PropertyGroup>
            
        </Properties>  
        <Behaviors>  
            <For ref="path">  
                <StrokeColor>$strokeColor</StrokeColor>  
                <StrokeStyle>$strokeStyle</StrokeStyle>  
                <D><![CDATA[
                    xFact = 1;
                    yFact = 1;
                    xInc1 = 0;
                    xInc2 = 0;
                    yInc1 = 0;
                    yInc2 = 0;
                    
                    rem = "Fix the 'a' point if it is near to the x o y position of the begining and end"
                    if ($a.x > $outDir.x -5 && $a.x < $outDir.x+5) {
                        $a.x = $outDir.x
                        }
                        
                    if ($a.x > $endPin.x -5 && $a.x < $endPin.x+5) {
                        $a.x = $endPin.x
                        }
                    if ($a.y > $outDir.y -5 && $a.y < $outDir.y+5) {
                        $a.y = $outDir.y
                        }
                        
                    if ($a.y > $endPin.y -5 && $a.y < $endPin.y+5) {
                        $a.y = $endPin.y
                        }
                    
                    rem = "detect the start direcction"    
                    
                    dx = $outDir.x - $startPin.x;
                    dy = $outDir.y - $startPin.y;
                    
                    if (Math.abs(dx) > Math.abs(dy)) {
                        xFact = Math.abs(dx)/dx;
                        
                        $outDir.x = $startPin.x + (15*xFact);
                        $outDir.y = $startPin.y;
                        
                        
                        result = [M($startPin.x, $startPin.y), 
                                    L($startPin.x + 10*xFact , $startPin.y - 5), 
                                    L($startPin.x + 10*xFact, $startPin.y + 5),  
                                    L($startPin.x, $startPin.y), 
                                    M($startPin.x + 10, $startPin.y),
                                    L($outDir.x,$outDir.y), 
                                    L($a.x, $a.y), L($endPin.x, $endPin.y)];
                        
                        
                    } else {
                        yFact = Math.abs(dy)/dy;
                        
                        $outDir.x = $startPin.x;
                        $outDir.y = $startPin.y + (15 * yFact);
                        
                        result = [M($startPin.x, $startPin.y), 
                                    L($startPin.x - 5, $startPin.y + 10*yFact ), 
                                    L($startPin.x + 5, $startPin.y + 10*yFact), 
                                    L($startPin.x, $startPin.y),
                                    M($startPin.x, $startPin.y+10),
                                    L($outDir.x,$outDir.y), 
                                    L($a.x, $a.y), L($endPin.x, $endPin.y)];
                    }
                    
                    
                    result
                    ]]>
                    </D>  
            </For>
            
            <For ref="text">
                <Color>$textColor</Color>
                <Font>$textFont</Font>
            </For>
            
            <For ref="textSpan">
                <InnerText>$textContent</InnerText>
                <Attr>
                    <Arg>"dy"</Arg>
                    <Arg>0 - $textFont.getPixelHeight() / 3</Arg>
                </Attr>
                <Attr>
                    <Arg>"dx"</Arg>
                    <Arg>
                        var arrowLength = Math.max($strokeStyle.w * 4, 6) * 2;
                        var dx = 0;
                        
                        dx;
                    </Arg>
                </Attr>
            </For>
        </Behaviors>  
        <p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil"  
                    xmlns="http://www.w3.org/2000/svg">  
            <defs>
                <path id="path" style="stroke-linejoin: round; fill: none;" />
            </defs>
            <use xlink:href="#path" stroke-width="10" stroke-opacity="0" stroke="#FF0000" />
            
            <text id="text">
                <textPath xlink:href="#path" startOffset="40" text-anchor="left" alignment-baseline="middle">
                    <tspan id="textSpan" dy="-5">Text along a curved path</tspan>
                </textPath>
            </text>

        </p:Content>  
    </Shape>
    
    <Shape id="freecurvy" displayName="free cruvy" icon="Icons/freecurvy.png">
        <Properties>
            <PropertyGroup name="Common">
                <Property displayName="Start" name="startPin" p:connectTo="*" type="Handle">0,0</Property>
                <Property displayName="b" name="b" type="Handle">100,50</Property>
                <Property displayName="End" name="endPin" p:connectTo="*" type="Handle">200,100</Property>
                <Property displayName="Start Arrow" name="withStartArrow" type="Bool">true</Property>
                <Property displayName="End Arrow" name="withEndArrow" type="Bool">false</Property>
            </PropertyGroup>
            <PropertyGroup name="Border">
                <Property displayName="Border Color" name="strokeColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
                <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">
                    <E>$$strokeStyle</E>
                </Property>
            </PropertyGroup>
        </Properties>
        <Behaviors>
            <For ref="path">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>
                    <![CDATA[
                    var spec = [M($startPin.x, $startPin.y), C($startPin.x, $startPin.y, $b.x, $b.y, $endPin.x, $endPin.y)]

                    len = 8

                    if($withStartArrow.value==true){

						aA = ($b.x - $startPin.x == 0)  ?  0 :  Math.atan(($b.y - $startPin.y) / ($b.x - $startPin.x))
                        aB = aA + Math.PI/4
                        aC = aA - Math.PI/4
                        console.log( "aA aB aC = " + aA + ", " + aB + ", " + aC)

                        if($b.x - $startPin.x >= 1e-3 ){ 
                            console.log(">>")
                            x00 = $startPin.x + len * Math.cos(aB)
                            y00 = $startPin.y + len * Math.sin(aB)
                            x01 = $startPin.x + len * Math.cos(aC) 
                            y01 = $startPin.y + len * Math.sin(aC)

                        }else if($b.x - $startPin.x < 1e-3){
                            console.log("<<")
                            x00 = $startPin.x - len * Math.cos(aB)
                            y00 = $startPin.y - len * Math.sin(aB)
                            x01 = $startPin.x - len * Math.cos(aC)
                            y01 = $startPin.y - len * Math.sin(aC)

                        }
                        console.log("x00, y00, x01, y01: (" + x00 + " " + y00 + " ) (" + x01 + " " + y01 + " )")

                        spec.unshift(M($startPin.x, $startPin.y), L(x00, y00),
                                    M($startPin.x, $startPin.y), L(x01, y01));
                    }

                    if($withEndArrow.value==true){

						aA = ($b.x - $endPin.x == 0)  ?  0 :  Math.atan(($b.y - $endPin.y) / ($b.x - $endPin.x))
                        aB = aA + Math.PI/4
                        aC = aA - Math.PI/4
                        console.log( "aA aB aC = " + aA + ", " + aB + ", " + aC)

                        if($b.x - $endPin.x >= 1e-3 ){ 
                            console.log(">>")
                            x00 = $endPin.x + len * Math.cos(aB)
                            y00 = $endPin.y + len * Math.sin(aB)
                            x01 = $endPin.x + len * Math.cos(aC) 
                            y01 = $endPin.y + len * Math.sin(aC)

                        }else if($b.x - $endPin.x < 1e-3){
                            console.log("<<")
                            x00 = $endPin.x - len * Math.cos(aB)
                            y00 = $endPin.y - len * Math.sin(aB)
                            x01 = $endPin.x - len * Math.cos(aC)
                            y01 = $endPin.y - len * Math.sin(aC)

                        }
                        console.log("x00, y00, x01, y01: (" + x00 + " " + y00 + " ) (" + x01 + " " + y01 + " )")

                        spec.unshift(M($endPin.x, $endPin.y), L(x00, y00),
                                    M($endPin.x, $endPin.y), L(x01, y01));
                    }

                    spec
                ]]>
                </D>
            </For>
        </Behaviors>
        <p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
            <path id="path" fill="none" style="stroke-linejoin: round;" />
        </p:Content>
    </Shape>
    <Shape id="multi-vetical-horizontal-line" displayName="multi-vetical-horizontal-line" icon="Icons/multi-vetical-horizontal-line.png">
        <Properties>
            <PropertyGroup name="Common">
                <Property displayName="Start" name="startPin" p:connectTo="*" type="Handle">0,0</Property>
                <Property name="b" displayName="Point" type="Handle">100,50</Property>
                <Property displayName="End" name="endPin" p:connectTo="*" type="Handle">200,100</Property>
                <Property displayName="Start Arrow" name="withStartArrow" type="Bool">true</Property>
                <Property displayName="End Arrow" name="withEndArrow" type="Bool">false</Property>
                <!-- <Property displayName="Slightly Detached" name="detached" type="Bool">false</Property> -->
            </PropertyGroup>
            <PropertyGroup name="Border">
                <Property displayName="Border Color" name="strokeColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
                <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">
                    <E>$$strokeStyle</E>
                </Property>
            </PropertyGroup>
        </Properties>
        <Behaviors>
            <For ref="path">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>
                    <![CDATA[
                    var spec = [M($startPin.x, $startPin.y),L($b.x, $startPin.y), L($b.x, $endPin.y), L($endPin.x, $endPin.y)];

                    if($withStartArrow.value==true){
                        //arrow to left when handle at startPin right and endPin at bottom of startPin
                        if( $b.x > $startPin.x  ){
                            spec.unshift(M($startPin.x, $startPin.y), L($startPin.x+5, $startPin.y-5),
                                M($startPin.x, $startPin.y), L($startPin.x+5, $startPin.y+5));
                        }

                        //arrow to right when handle at startPin left and endPin at right of startPin
                        if( $b.x < $startPin.x  ){
                            spec.unshift(M($startPin.x, $startPin.y), L($startPin.x-5, $startPin.y-5),
                                M($startPin.x, $startPin.y), L($startPin.x-5, $startPin.y+5));
                        }

                        //arrow to up when handle at startPin.X and endPin at bottom of startPin
                        if( $b.x ==  $startPin.x && $endPin.y > $startPin.y ){
                            spec.unshift(M($startPin.x, $startPin.y), L($startPin.x-5, $startPin.y+5),
                                M($startPin.x, $startPin.y), L($startPin.x+5, $startPin.y+5));
                        }
                        

                        //arrow to down when handle at startPin.X and endPin at up of startPin
                        if( $b.x ==  $startPin.x && $endPin.y < $startPin.y ){
                            spec.unshift(M($startPin.x, $startPin.y), L($startPin.x-5, $startPin.y-5),
                                M($startPin.x, $startPin.y), L($startPin.x+5, $startPin.y-5));
                        }
                    }

                    if($withEndArrow.value==true){

                        //spec.unshift(M($endPin.x, $endPin.y), L($endPin.x-5, $endPin.y-5),
                        //                M($endPin.x, $endPin.y), L($endPin.x-5, $endPin.y+5));

                         //arrow to left when handle at startPin right and endPin at bottom of startPin
                        if( $b.x > $endPin.x  ){
                            spec.unshift(M($endPin.x, $endPin.y), L($endPin.x+5, $endPin.y-5),
                                M($endPin.x, $endPin.y), L($endPin.x+5, $endPin.y+5));
                        }

                        //arrow to right when handle at startPin left and endPin at right of startPin
                        if( $b.x < $endPin.x  ){
                            spec.unshift(M($endPin.x, $endPin.y), L($endPin.x-5, $endPin.y-5),
                                M($endPin.x, $endPin.y), L($endPin.x-5, $endPin.y+5));
                        }

                        //arrow to up when handle at startPin.X and endPin at bottom of startPin
                        if( $b.x ==  $endPin.x && $endPin.y > $startPin.y ){
                            
                            spec.unshift(M($endPin.x, $endPin.y), L($endPin.x-5, $endPin.y-5),
                                M($endPin.x, $endPin.y), L($endPin.x+5, $endPin.y-5));
                        }

                        //arrow to down when handle at startPin.X and endPin at up of startPin
                        if( $b.x ==  $endPin.x && $endPin.y < $startPin.y ){
                            spec.unshift(M($endPin.x, $endPin.y), L($endPin.x-5, $endPin.y+5),
                                M($endPin.x, $endPin.y), L($endPin.x+5, $endPin.y+5));
                        }
                    }

                    spec;
                    ]]>
                </D>
            </For>
        </Behaviors>
        <p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
            <path id="path" fill="none" style="stroke-linejoin: round;" />
        </p:Content>
    </Shape>
    <Shape id="multi-seg-hvhv-line" displayName="multi-horizine-vetical-horizontal-vetical-line" icon="Icons/multi-seg-hvhv-line.png">
        <Properties>
            <PropertyGroup name="Common">
                <Property name="startPin" displayName="Start" p:connectTo="*" type="Handle">0,0</Property>
                <Property name="b" displayName="Point" type="Handle">100,50</Property>
                <Property name="v" displayName="Point" type="Handle">200,100</Property>
                <Property name="endPin" displayName="End" p:connectTo="*" type="Handle">200,50</Property>
                <Property displayName="Start Arrow" name="withStartArrow" type="Bool">true</Property>
                <Property displayName="End Arrow" name="withEndArrow" type="Bool">false</Property>
                <!-- <Property displayName="Slightly Detached" name="detached" type="Bool">false</Property> -->
            </PropertyGroup>
            <PropertyGroup name="Border">
                <Property displayName="Border Color" name="strokeColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
                <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">
                    <E>$$strokeStyle</E>
                </Property>
            </PropertyGroup>
        </Properties>
        <Behaviors>
            <For ref="path">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>
                    <![CDATA[
                    $v.x = $endPin.x;
                    
                    var spec = [M($startPin.x, $startPin.y),L($b.x, $startPin.y), L($b.x, $v.y), L($endPin.x, $v.y), L($endPin.x, $endPin.y)];

                    if($withStartArrow.value==true){
                        //arrow to left when handle at startPin right and endPin at bottom of startPin
                        if( $b.x > $startPin.x  ){
                            spec.unshift(M($startPin.x, $startPin.y), L($startPin.x+5, $startPin.y-5),
                                M($startPin.x, $startPin.y), L($startPin.x+5, $startPin.y+5));
                        }

                        //arrow to right when handle at startPin left and endPin at right of startPin
                        if( $b.x < $startPin.x  ){
                            spec.unshift(M($startPin.x, $startPin.y), L($startPin.x-5, $startPin.y-5),
                                M($startPin.x, $startPin.y), L($startPin.x-5, $startPin.y+5));
                        }

                        //arrow to up when handle at startPin.X and endPin at bottom of startPin
                        if( $b.x ==  $startPin.x && $endPin.y > $startPin.y ){
                            spec.unshift(M($startPin.x, $startPin.y), L($startPin.x-5, $startPin.y+5),
                                M($startPin.x, $startPin.y), L($startPin.x+5, $startPin.y+5));
                        }
                        

                        //arrow to down when handle at startPin.X and endPin at up of startPin
                        if( $b.x ==  $startPin.x && $endPin.y < $startPin.y ){
                            spec.unshift(M($startPin.x, $startPin.y), L($startPin.x-5, $startPin.y-5),
                                M($startPin.x, $startPin.y), L($startPin.x+5, $startPin.y-5));
                        }
                    }

                    if($withEndArrow.value==true){

                         //arrow to left when handle at startPin right and endPin at bottom of startPin
                        if( $v.x > $endPin.x  ){
                            spec.unshift(M($endPin.x, $endPin.y), L($endPin.x+5, $endPin.y-5),
                                M($endPin.x, $endPin.y), L($endPin.x+5, $endPin.y+5));
                        }

                        //arrow to right when handle at startPin left and endPin at right of startPin
                        if( $v.x < $endPin.x  ){
                            spec.unshift(M($endPin.x, $endPin.y), L($endPin.x-5, $endPin.y-5),
                                M($endPin.x, $endPin.y), L($endPin.x-5, $endPin.y+5));
                        }

                        //arrow to up when handle at startPin.X and endPin at bottom of startPin
                        if( $v.x ==  $endPin.x && $endPin.y > $v.y ){
                            
                            spec.unshift(M($endPin.x, $endPin.y), L($endPin.x-5, $endPin.y-5),
                                M($endPin.x, $endPin.y), L($endPin.x+5, $endPin.y-5));
                        }

                        //arrow to down when handle at startPin.X and endPin at up of startPin
                        if( $v.x ==  $endPin.x && $endPin.y < $v.y ){
                            spec.unshift(M($endPin.x, $endPin.y), L($endPin.x-5, $endPin.y+5),
                                M($endPin.x, $endPin.y), L($endPin.x+5, $endPin.y+5));
                        }
                    }

                    spec;
                    ]]>
                </D>
            </For>
        </Behaviors>
        <p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
            <path id="path" fill="none" style="stroke-linejoin: round;" />
        </p:Content>
    </Shape>
</Shapes>  
